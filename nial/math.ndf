# various math routines

idv is op x y {
  % integer division;
  floor((x - (x mod y)) div y) };

dvm is op x y {
  % divmod;
  x [idv,mod] y };

base is op k n {
  % base n representation of k;
  if n < 1 then k := ?badbase
  elseif n = 1 then k := k reshape 1
  else while first k > (n - 1) do
    k := first k dvm n link rest k;
  endwhile endif; k }

bits is op k {
  % bit vector for a positive integer;
  (k base 2) eachall = 1 }

nbits is op n k {
  % (bits k) padded/chopped to n bits;
  res := bits k;
  if tally res > n then
     res := (tally res - n) drop res
  elseif tally res < n then
     res := (n - tally res) reshape o link res
  else res endif }

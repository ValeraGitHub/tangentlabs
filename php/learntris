#!/usr/local/bin/php -f
<?php
//===============================================
// learntris implementation in j-style php5 //===============================================

//-- j/array stuff ------------------------------

// up, ar[ray], s[i]z[e] and re[shape] routines
function up($z, $f)
{ for($i=0; $i<$z; $i++) $f($i); }

function sz($a) // size of an array
{ return count($a); }

function re($n, $v) // repeat n copies of v
{ $r=[];
  up($n, function($i) use (&$r, $v)
         { $r[]=$v; });
  return $r; }

function v($m, $f) // visit: v(a2d, f(x,y,eol,val))
{ for ($y=0; $y<sz($m); $y++)
  { for ($x=0; $x<sz($m[$y]); $x++)
      $f($x,$y,$x+1==sz($m[$y]), $m[$y][$x]); }}

//-- tetris stuff ------------------------------

$SYM = ".x"; // block/cell symbols
$matrix = re(22, re(10,0)); // a 10*22 well

function p($m) // p cmd: print the matrix
{ v($m, function($x, $y, $eol, $val)
  { global $SYM;
    echo $SYM[$val] . ($eol ? "\n" : ' '); }); }

// -- main code --------------------------------
$done = false;
while (! $done)
{ $line = fgets(STDIN);
  for ($i=0; $i<sz($line); $i++)
  { switch ($ch=$line[$i])
    { case 'q' : $done = true; break;
      case 'p' : p($matrix); break; } } }
